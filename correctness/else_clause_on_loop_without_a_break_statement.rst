``break`` 文の無いループの ``else`` 句
===================================
ループの ``else`` 句はループの列（sequence）が空になったときに実行される。 ``break`` 文が明記されていないループでは、 ``else`` 句は決まって実行される。ループの列は終いには必ず空になるからだ。こうした振る舞いは意図してのことであって、このエラーは無視してよい、といった場合もある。しかしほとんどの場合これは意図せざる振る舞いであるため、問題となっているコードを見直さなければならない。

Anti-pattern
------------

以下のコードは、ループが ``else`` 文を含んでいるにもかかわらず ``break`` を明記していない場合に生じうるような、意図しない振る舞いを例示している。
``contains_magic_number()`` は数値のリストを走査して、それぞれの数値とマジックナンバーを比較する。マジックナンバーが見つかれば関数は「このリストにはマジックナンバーが含まれています」と出力する。見つからなければ「このリストにはマジックナンバーは含まれていません」と出力する。この関数を ``range(10)`` とマジックナンバー5を引数にして呼び出せば、「このリストにはマジックナンバーが含まれています」とだけプリントすることが期待される。ところが、コードは「このリストにはマジックナンバーは含まれていません」ともプリントしてしまう。これは ``range(10)`` のリストが最後には空になり、それがPythonに ``else`` 句を実行させるからだ。


.. code:: python

    def contains_magic_number(list, magic_number):
        for i in list:
            if i == magic_number:
                print("このリストにはマジックナンバーが含まれています")
        else:
            print("このリストにはマジックナンバーは含まれていません")

    contains_magic_number(range(10), 5)
    # このリストにはマジックナンバーが含まれています
    # このリストにはマジックナンバーは含まれていません

Best practices
--------------

ループに ``break`` 文を挿入する
............................

``else`` 句が常にループの最後に実行されるのが望ましくないなら、ループブロックに ``break`` 文を追加するべきだ。

.. code:: python

    def contains_magic_number(list, magic_number):
        for i in list:
            if i == magic_number:
                print("このリストにはマジックナンバーが含まれています")
                # ここにbreakを追加
                break
        else:
            print("このリストにはマジックナンバーが含まれていません")

    contains_magic_number(range(10), 5)
    # このリストにはマジックナンバーが含まれています
