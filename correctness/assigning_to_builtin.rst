組み込み関数に代入する
==================

Pythonは多くの組み込み関数を持ち、これらはインタプリタ内ではいつでも呼び出せる。特別な理由が無い限り、組み込み関数を上書いたり、同じ名前の変数に値を代入したりすべきではない。組み込みの上書きは望まぬ副作用を引き起こしたり、ランタイムエラーを生じさせかねない。Python開発者は、普通は組み込みを「そのまま」使う。組み込みの振る舞いが変われば、現に起こったエラーの追跡がやりにくくなる。

Anti-pattern
------------

以下のコードでは組み込みの ``list`` が上書かれている。これではリストとして変数を定義するのに ``list`` を使うことができない。これは極めて簡単な例だから何が問題かは一目瞭然だ。けれども、数百行の間に ``list`` と ``cars`` への代入があったなら、問題の同定は困難になるだろう。

.. code:: python

    # 'list'という変数に値を割り当てることで組み込みの'list'を上書きしてる
    list = [1, 2, 3]
    # 'cars'というリストの定義はここではエラーを吐く
    cars = list()
    # Error: TypeError: 'list' object is not callable

Best practice
-------------

組み込み関数と同じ名前の変数を使う特別な理由が無い限り、組み込み関数名と干渉しない変数名の使用が推奨される。

.. code:: python

    # 'list'の代わりに'numbers'が変数名に使われている
    numbers = [1, 2, 3]
    # リストとしての'cars'の定義はちゃんと動く
    cars = list()

原文: https://docs.quantifiedcode.com/python-anti-patterns/correctness/assigning_to_builtin.html
